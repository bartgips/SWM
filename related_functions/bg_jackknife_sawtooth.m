function [stats]=bg_jackknife_sawtooth(shapeMat,fignum)
% stats = bg_jackknife(shapeMat, fignum)
% 
% Estimates confidence interval of skewness of noisy shapes contained in 
% 'shapeMat' using delete-1 jackknife. This means the number of samples used 
% for estimation is equal to the number of shapes in shapeMat.
% 
% This method is useful when the individual shapes are very
% noisy, and this noise hinders you in determining the true skewness of
% every shape individually. Averaging over all-but-one shapes, will average 
% out the noise as much as possible.
% 
% Note: this method assumes a unimodal distribution of skewness.
% If the input is a result (a single cluster) from bg_SWM this is a
% fair assumption.
% 
% %%%%%%%%%
% input:
% %%%%%%%%%
% 
% shapeMat: a matrix of size numShapes x numTimepoints. E.g. the resulting
%           matrices from bg_swm_extract.
% 
% fignum:   (optional) the figure number to which to plot every sample with
%           its respective sawtooth fit
% 
% %%%%%%%%%
% output:
% %%%%%%%%%
% 
% stats:  a structure containing the calculated statistics:
% 
% .mu:    mean skewness
% .sem:   estimated standard error of .mu
% .distr: the samples generated by the jackknife procedure with which .mu
%         and .sem are calculated

[numTemp, tempLen]=size(shapeMat);
numIt=numTemp;
skwIdx=nan(numIt,1);

reverseStr=[];
options=optimset('Algorithm','interior-point','Display','off');
minpkdist=round(size(shapeMat,2)/3);
skwT=nan(2,numIt);

% cut off sides (focus on centre theta shape +- 10%)
[~,ax]=findpeaks(sign(sum(shapeMat(:)-mean(minmax(nanmean(shapeMat)))))*nanmean(shapeMat),'minpeakdistance',round(tempLen/3));
brd=mean(ax)+[-1 1]*diff(ax)*.55;
brd=[max(floor(brd(1)),1) min(ceil(brd(2)),tempLen)];
shapeMat=shapeMat(:,brd(1):brd(2));

X0=[diff(minmax(nanmean(shapeMat)))/2, tempLen/2, 0, mean(shapeMat(:)), 0]';

for iter=1:numIt
  
  sel=true(size(shapeMat,1),1);
  sel(iter)=false;
  meanShape=nanmean(shapeMat(sel,:))';

   
  msg=sprintf(['Iteration %d/%d\n'], [iter numIt]);
  fprintf([reverseStr, msg]);
  reverseStr = repmat(sprintf('\b'), 1, length(msg));
  %% calculating SkwIdx
  
    
    %sawtoothfit
    lowerBound=[0; (tempLen/4); -(tempLen/2); -inf; -.999];
    upperBound=[10; (tempLen*3/4); (tempLen/2); inf; .999];
    [X0]=fmincon(@(x)sawtoothfit(meanShape,x),X0,[],[],[],[],lowerBound,upperBound,[],options);
    skwIdx(iter)=X0(5);
    
    if nargin >1 && fignum
      shapeMat=X0;
      stdum=shapeMat(1)*sawtooth(([1:numel(meanShape)]-shapeMat(3))*2*pi/shapeMat(2),(shapeMat(5)+1)/2)+shapeMat(4);
      figure(fignum)
      plot(meanShape)
      hold on
      plot(stdum,'r')
      hold off
      title(sprintf(['Iteration %d/%d\n'], [iter numIt]))
      xlim([1 numel(meanShape)])
    end
    

  
end

stats.mu=mean(skwIdx);
stats.sem=sqrt((numTemp-1)*var(skwIdx,1));
stats.distr=skwIdx;



function c=sawtoothfit(dat, shapeMat)
% shapeMat = [ amplitude; period; offset_t; offset_y; skewness];

dat=dat(:);
swth=shapeMat(1)*sawtooth(([1:numel(dat)]-shapeMat(3))*2*pi/shapeMat(2),(shapeMat(5)+1)/2)+shapeMat(4);
c=sumsqr((dat(:)-swth(:)));


